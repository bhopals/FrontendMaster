
#### Functional Programming (FP)
Functional programming is a coding paradigm centered around:
 - pure functions and expressions, 
    - They enable “referential transparency” - which means that a function call can be replaced 
      with its computed value without affecting the program’s behavior.
 - prioritizing immutability  

 - avoiding side effects.

The core ideas of FP encompass:
 - immutability, 
 - pure functions,  
 - function compositions, 
    - Functional programming encourages composing functions to create more complex operations. 
    - Function composition allows developers to chain pure functions together, creating a pipeline where the output of one function becomes the input of another.


- Immutability ensures data remains unchanged, creating a more predictable codebase and supporting better performance in modern processors.
- Pure functions enable “referential transparency,” simplifying testing and analysis.
- Function compositions offer expressive pipelines, promoting code reusability, and facilitating easier maintenance.

all working together to produce clear, predictable code that enhances readability and maintainability.
Reference - https://itnext.io/understanding-the-functional-programming-paradigm-ffbd1474e4e6


#### Difference for..in and for..of:
Both for..in and for..of are looping constructs which are used to iterate over data structures. 
The only difference between them is the entities they iterate over:

- for..in iterates over all enumerable property keys of an object
- for..of iterates over the values of an iterable object. Examples of iterable objects are arrays, strings, and NodeLists.

Both for..of and for..in statements iterate over lists; the values iterated on are different though, for..in returns a list of keys on the object being iterated, whereas for..of returns a list of values of the numeric properties of the object being iterated.

Here is an example that demonstrates this distinction:

let list = [4, 5, 6];
for (let i in list) {
  console.log(i); // "0", "1", "2",
}
for (let i of list) {
  console.log(i); // 4, 5, 6
}

- The for-in operator returns the keys of an object of array, whereas the for-of operator provides access to the values of these keys.


#### Point free programming and function composition

Point free programming (a.k.a. Tacit programming), formally, is a programming paradigm in which function definitions don’t include information about their arguments. It instead focuses more on combinators and composition to manipulate the arguments themselves.

In simpler terms, point free programming focuses on eliminating unnecessary parameters and arguments from the code. The term point refers to a function’s parameter input. This methodology is also sometimes referred to as equational reasoning in more functional languages. I think equational reasoning is a means to make a program point free.

Here’s an example of making code point free:

const add1 = n => n + 1;

[1, 2, 3].map(n => add1(n)); // [2, 3, 4]

// A point free variant - unnecessary parameter eliminated
[1, 2, 3].map(add1); // [2, 3, 4]
Point free style can also be combined with currying (previous blog post).

const add = (a, b) => a + b;

[1, 2, 3].map(curry(add)(1)); // [2, 3, 4]



Composition
Composition refers to using functions together. When combining functions, the order of composition matters. For example, consider the example from the first blog post.

const add1 = num => num + 1;
const mul2 = num => num * 2;

// compose a new function using the above two
// note the order of function invocation matters
const addAndMultiply = num => mul2(add1(num));
Although we read the composition from left to right, the actual order of function invocation happens right to left, i.e. first add1 is invoked and then the result is passed to mul2.

A couple of useful utilities for composition are compose and pipe.

compose
Returns a composed function from the inputs which executes right to left (as displayed in the example above).

const compose = (...fns) => arg =>
	[...fns].reverse().reduce((result, fn) => fn(result), arg);

const add1 = num => num + 1;
const mul2 = num => num * 2;

const addAndMultiply = compose(
	mul2,
	add1,
); // right to left order

console.log(addAndMultiply(2)); // 6 - first add1 then mul2
pipe
Pipe is similar to compose but follows a more natural order of left to right invocation of composed functions.

const pipe = (...fns) => arg =>
	[...fns].reduce((result, fn) => fn(result), arg);

const add1 = num => num + 1;
const mul2 = num => num * 2;

const multiplyAndAdd = pipe(
	mul2,
	add1,
); // left to right order

console.log(multiplyAndAdd(2)); // 5 - first mul2 then add1
Refer - https://divyanshu013.dev/blog/point-free-programming-and-composition/#:~:text=Point%20free%20programming%20(a.k.a.%20Tacit,to%20manipulate%20the%20arguments%20themselves.

#### Function arity and partial application
Refer - https://divyanshu013.dev/blog/functional-programming-partial-application